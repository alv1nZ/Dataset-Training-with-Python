#Importing Libs
import pandas as pd 
import matplotlib.pyplot as plt 
import numpy as np
import pylab as pl
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from pandas .plotting import scatter_matrix
from matplotlib import cm
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import LabelEncoder

#reading data 
df = pd.read_csv('shoppers intention.csv')
df.head()
#convert weekend and visitortype boolean data types into numbers
weekend = LabelEncoder()
VisitorType = LabelEncoder()
df['Weekend'] = weekend.fit_transform(df['Weekend'])
df['VisitorType'] = weekend.fit_transform(df['VisitorType'])
df_n = df.drop(['Weekend','VisitorType'],axis='columns')

#Choose which columns are relevant to train to predict revenue
feature_names = ['PageValues','ExitRates','ProductRelated_Duration','SpecialDay','Weekend','VisitorType'] #decide which columns to put for x and y training and test sets
X = df[feature_names]
y = df['Revenue']

#Exploratory Analysis, dropping unused columns
print(df.shape)
print (df['Revenue'].unique())
print (df.groupby('Revenue').size())
#Exploratory Analysis
plt.savefig('revenue_box')
plt.show()
df.drop(['Administrative','Administrative_Duration','Informational','Informational_Duration','OperatingSystems','Browser','Region','TrafficType','BounceRates','ExitRates'],axis='columns').hist(bins=30, figsize=(20,20)) 
pl.suptitle("Revenue Histogram for each numeric input variable") 
plt.savefig('revenue_hist')
plt.show()

#Splitting Training and test sets
X_train,X_test,y_train,y_test, = train_test_split(X,y,test_size = 0.3,random_state=5)
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

#Machine Learning
#Decision Tree Algo
clf = DecisionTreeClassifier().fit(X_train,y_train)
print ('Accuracy of Decision Tree classifier on training set: {:.2f}'
      .format(clf.score(X_train,y_train)))
print ('Accurary of Decision tree on test set: {:.2f}'
      .format(clf.score(X_test,y_test)))

#KNN
knn = KNeighborsClassifier()
knn.fit(X_train,y_train)
print('K-NN classifier accuracy rate on training set: {:.2f}'
      .format(knn.score(X_train,y_train)))
print('K-NN classifier accuracy rate on test set: {:.2f}'
      .format(knn.score(X_test,y_test)))
#SVM
svm = SVC()
svm.fit(X_train,y_train)
print('Accuracy of SVM classifier on training set: {:.2f}'
      .format(svm.score(X_train,y_train)))
print('Accuracy of SVM classifier on test set: {:.2f}'
      .format(svm.score(X_test,y_test))) 
pred = svm.predict(X_test) 
print(confusion_matrix(y_test,pred))
print(classification_report(y_test,pred))